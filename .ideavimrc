"" .ideavimrc - Matt Chapman


"" Base Settings
"" ========================================================

set scrolloff=10
set showmode
set showcmd
set relativenumber

set smartcase
set incsearch
set hlsearch

set visualbell

" Use system clipboard
set clipboard+=unnamed   

let mapleader = " "


filetype plugin indent on
"" Plugin Settings
"" ========================================================

set surround
set highlightedyank
set commentary
set sneak
set quickscope
set nerdtree
set argtextobj
set which-key

autocmd FileType cs setlocal commentstring=////\ %s
" Easymotion settings
set easymotion
set notimeout

" Quickscope settings
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let g:qs_accepted_chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
let g:qs_primary_color = '#ff5500'
let g:qs_secondary_color = '#ff00ff'

" Which-key settings
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"
leaderleader
let g:WhichKeyDesc_leader = "<leader> Leader key"

let g:WhichKeyDesc_leader = "<leader>x Open file explorer"

let g:WhichKeyDesc_easymotion = "<leader>j Jump with Easymotion"
let g:WhichKeyDesc_easymotion_prefix = "<leader><leader>"
let g:WhichKeyDesc_comment = "<leader>c Comment line"

let g:WhichKeyDesc_fold = "<leader>z Folding"
let g:WhichKeyDesc_fold_all = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"

let g:WhichKeyDesc_window = "<leader>w Window splits"
let g:WhichKeyDesc_window_split_vertically = "<leader>wv Split vertically"
let g:WhichKeyDesc_window_split_horizontally = "<leader>wh Split horizontally"
let g:WhichKeyDesc_window_split_unsplit = "<leader>wu Unsplit"
let g:WhichKeyDesc_window_split_move_editor = "<leader>wm Move editor to opposite tab group"
let g:WhichKeyDesc_window_hide_all = "<leader>wx Hide all windows"

let g:WhichKeyDesc_display = "<leader>d Display options"
let g:WhichKeyDesc_zen_mode = "<leader>dz Toggle Zen mode"
let g:WhichKeyDesc_df_mode = "<leader>dd Toggle Distraction-Free mode"
let g:WhichKeyDesc_fullscreen = "<leader>df Toggle full screen"

let g:WhichKeyDesc_action= "<leader>a Actions"
let g:WhichKeyDesc_action_context_menu = "<leader>am Open context menu"
let g:WhichKeyDesc_action_search = "<leader>as Open command modal"

let g:WhichKeyDesc_file_quickLook = "<leader><leader> Recent files"

let g:WhichKeyDesc_file_nav = "<leader>f File navigation"
let g:WhichKeyDesc_file_nav_goto_file = "<leader>ff Go to file"
let g:WhichKeyDesc_file_nav_goto_content = "<leader>fc Search for file content"
let g:WhichKeyDesc_file_nav_show_recent_files = "<leader>fr Show recent files"
let g:WhichKeyDesc_file_nav_show_recent_locations = "<leader>fl Show recent locations"

let g:WhichKeyDesc_close_tab = "<leader>q Close active tab"
let g:WhichKeyDesc_close_all_tabs = "<leader>Q Close other tabs"

let g:WhichKeyDesc_refactoring = "<leader>r Refactoring menu"
let g:WhichKeyDesc_refactoring_rename = "<leader>rn Rename element"
let g:WhichKeyDesc_refactoring_method = "<leader>rm Extract method"
let g:WhichKeyDesc_refactoring_variable = "<leader>rv Introduce variable"
let g:WhichKeyDesc_refactoring_field = "<leader>rf Introduce field"
let g:WhichKeyDesc_refactoring_signature = "<leader>rs Change signature"
let g:WhichKeyDesc_refactoring_all = "<leader>rr Open refactorings list"

let g:WhichKeyDesc_goto = "<leader>g Go to X"
let g:WhichKeyDesc_goto_declaration = "<leader>gd Go to Definition"
let g:WhichKeyDesc_goto_type_declaration = "<leader>gy Go to Type Definition"
let g:WhichKeyDesc_goto_implementation = "<leader>gi Go to Implementation"
let g:WhichKeyDesc_goto_usages = "<leader>gu Go to Usages "
let g:WhichKeyDesc_goto_test = "<leader>gt Go to Test"
let g:WhichKeyDesc_goto_back = "<leader>gb Go Back"
let g:WhichKeyDesc_goto_forward = "<leader>gf Go Forward"

let g:WhichKeyDesc_git = "<leader>g Git operations"
let g:WhichKeyDesc_git_commit = "<leader>gc Open Git commit dialog"
let g:WhichKeyDesc_git_status = "<leader>gs Open Git status dialog"

let g:WhichKeyDesc_errors = "<leader>e Error navigation"
let g:WhichKeyDesc_errors_next = "<leader>en Go to next error in solution"
let g:WhichKeyDesc_errors_prev = "<leader>ep Go to previous error in solution"

let g:WhickKeyDesc_unittest =", Unittest operations"
let g:WhickKeyDesc_unittest_run_context =",r Run context"
let g:WhickKeyDesc_unittest_debug_context =",d Debug context"
let g:WhickKeyDesc_unittest_rerun_failed =",f Rerun failed"
let g:WhickKeyDesc_unittest_run_solution =",s Run solution"
let g:WhickKeyDesc_unittest_toggle_breakpoint =",b Toggle breakpoint"

"" Key mappings
"" ========================================================

inoremap jk <Esc>
" Ideavim open and load 
nnoremap \e :e ~/.ideavimrc<CR>
nnoremap \r :source ~/.ideavimrc<CR>

" Tab navigation
nnoremap <A-n> :tabnext<CR>
nnoremap <A-p> :tabprev<CR>

" Pane navigation
nnoremap <A-h> <C-w>h
nnoremap <A-l> <C-w>l
nnoremap <A-k> <C-w>k
nnoremap <A-j> <C-w>j

" Jump between methods
map [[ <Action>(MethodUp)
map ]] <Action>(MethodDown)

" Easy visual indentation
vnoremap < <gv
vnoremap > >gv

" Execute macro saved in 'q' register
nnoremap qj @q

" Popup navigation
inoremap <C-k> :action EditorUp<CR>
inoremap <C-j> :action EditorDown<CR>

" Terminal
nnoremap <C-t> :action ActivateTerminalToolWindow<CR>

"" Leader commands
"" ========================================================

" Jump around with easymotion
map <leader>j <Plug>(easymotion-s)

" Open NERDTree (use q to exit)
map <leader>x :NERDTree<CR>
map <leader>fx :NERDTreeFind<CR>

 Folding
map <leader>zc :action CollapseAllRegions<CR>
map <leader>zo :action ExpandAllRegions<CR>

" Window splits
map <leader>wv <Action>(SplitVertically)
map <leader>ws <Action>(SplitHorizontally)
map <leader>wu <Action>(Unsplit)
map <leader>wx <Action>(HideAllWindows)

" Display options
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>dz <action>(ToggleZenMode)
map <leader>df <action>(ToggleFullScreen)
map <leader>dc <Action>(ActivateGitHubCopilotChatToolWindow)

" Actions
map <leader>am <action>(ShowIntentionActions)
map <leader>as <action>(SearchEverywhere)

" File navigation
map <leader>ff <action>(GotoFile)
map <leader>fr <action>(RecentFiles)
map <leader>fc <action>(FindInPath)
map <leader><leader> <Action>(RecentFiles)
map <leader>fl <action>(RecentLocations)
map <leader>fs <action>(NewScratchFile)

" Close active tab
map <leader>q <action>(CloseContent)
map <leader>Q <action>(CloseAllEditorsButActive)

" Refactoring
map <leader>rn <Action>(RenameElement)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)
map <leader>rf <Action>(IntroduceField)
map <leader>rs <Action>(ChangeSignature)
map <leader>rr <Action>(Refactorings.QuickListPopupAction)

" Go to code
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gb <Action>(Back)
nmap <leader>gf <Action>(Forward)

" Git windows
map <leader>gc <Action>(CheckinProject)
" map <leader>gs <Action>(ActivateVersionControlToolWindow)

" Errors
map <leader>en <Action>(ReSharperGotoNextErrorInSolution)
map <leader>ep <Action>(ReSharperGotoPrevErrorInSolution)

" Run Tests
map ,r <Action>(RiderUnitTestRunContextAction)
map ,d <Action>(RiderUnitTestDebugContextAction)
map ,s <Action>(RiderUnitTestRunSolutionAction)
map ,f <Action>(RiderUnitTestSessionRerunFailedTestsAction)
map ,b <Action>(ToggleLineBreakpoint)
map ,e <Action>(RiderUnitTestRunCurrentSessionAction)
map ,a <Action>(RiderUnitTestAppendTestsAction)

" Default bindings

" Deleting
" di( delete all inside parentheses
" da( delete all and parentheses
" same applies for all sourrounds


" "Sourround" plugin
" ysiw + surrounder = surround word with "surrounder"
" ysaw + sourrounder = surround word with spaces between word and { surrounder }
" ys2aw + sourrounder = surround multiple words with spaces between word "and surrounder"
"" yss  + surrounder = surround entire line"
" S + surrounder = surround @selected text@ in visual mode
" ds + surrounder = delete [  surrounding  ]  surrounding 
" cs + surrounder + new_surrounder = change { surrocsunding } to [  new_surrounder  ]

" "Sneak plugin"
" s + 2 characters = jump to the first occurrence of the 2 characters
"
" S + 2 characters = jump to the last occurrence of the 2 characters
